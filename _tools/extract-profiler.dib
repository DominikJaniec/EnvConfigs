#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","aliases":["c#","C#"],"languageName":"C#"},{"name":"fsharp","aliases":["f#","F#"],"languageName":"F#"},{"name":"pwsh","aliases":["powershell"],"languageName":"PowerShell"},{"name":"javascript","aliases":["js"],"languageName":"JavaScript"},{"name":"html","aliases":[],"languageName":"HTML"},{"name":"sql","aliases":[],"languageName":"SQL"},{"name":"kql","aliases":[],"languageName":"KQL"},{"name":"mermaid","aliases":[],"languageName":"Mermaid"},{"name":"httpRequest","languageName":"http","aliases":[]},{"name":"value","aliases":[]},{"name":"vscode","aliases":["frontend"]},{"name":".NET","aliases":[]},{"name":"webview","aliases":[]}]}}

#!fsharp

let __SOURCED_PROFILER_FILE__ =
    "../Shells/Profile.ps1"

let __TERMINATING_SOURCE_REGION__ =
    "> Log Profiler capabilities"

let __GENERATED_PROFILER_FILE__ =
    "./domins-profiler.ps1"

#!fsharp

let resolvePath (relative: string) =
    let sep = IO.Path.DirectorySeparatorChar
    let cwd = Environment.CurrentDirectory
    let location = relative.Replace('/', sep)

    IO.Path.Combine(cwd, location)
    |> IO.Path.GetFullPath

    
let __EXPECTED_PROFILER_SOURCE__ =
    resolvePath __SOURCED_PROFILER_FILE__

let __DESIRED_PROFILER_OUTPUT__ =
    resolvePath __GENERATED_PROFILER_FILE__


$"Looking for file '{__EXPECTED_PROFILER_SOURCE__}'"

#!fsharp

let profileFile =
    __EXPECTED_PROFILER_SOURCE__
    |> IO.File.ReadAllLines

let regionStart = "#region "
let regionEnd = "#endregion"
let regionTerminating =
    regionStart + __TERMINATING_SOURCE_REGION__

let equalic a b =
    let oic = StringComparison.OrdinalIgnoreCase
    String.Equals(a, b, oic)


let profilerCodeLines =
    let terminate = regionTerminating
    let mutable lookForEnd = false
    let linesChooser (line: string) =
        let line = line.TrimEnd() 
        match lookForEnd with
        | false ->
            if line |> equalic terminate
            then lookForEnd <- true

            Some line

        | _ ->
            if line |> equalic regionEnd
            then None
            else Some line

    profileFile
    |> Seq.map linesChooser
    |> Seq.takeWhile Option.isSome
    |> Seq.map Option.get
    |> Seq.toArray


let profilerCode =
    let stringLine char length =
        String.replicate length char

    let longline = stringLine "#" 69
    let spacer = Array.replicate 3 ""

    let header = 
        let content =
            @"
            param (
                [switch]$__PROFILER_SetStrictModeStop,
                [switch]$__PROFILER_SetDebugVerbose,
                [switch]$__PROFILER_WriteOn_LogEvent,
                [switch]$__PROFILER_WithExamples
            )
            ".Split(Environment.NewLine)

        let prefixed line =
            "###       " + line

        [ longline
        ; prefixed
            "!! this is auto-generated script file !!"
        ; prefixed
            "source: EnvConfig > extract-profiler.dib"
        ; longline
        ; yield! content
        ; longline
        ; ""
        ]
        |> List.toArray

    let footer =
        let contentEvents =
            let profileFile = 
                __DESIRED_PROFILER_OUTPUT__
                |> IO.Path.GetFileName
                    
            let finalEvent =
                $"script file '{profileFile}' executed"

            let underline =
                finalEvent.Length
                |> stringLine "~"

            let asEvent msg =
                $"__logEvent \"%s{msg}\""

            [ finalEvent ; underline ]
            |> List.map asEvent

        [ ""
        ; longline
        ; ""
        ; yield! contentEvents
        ; ""
        ]
        |> List.toArray

    [ header
    ; spacer
    ; profilerCodeLines
    ; spacer
    ; footer
    ]
    |> Seq.concat
    |> String.concat
        Environment.NewLine


$"Got {profilerCodeLines.Length} lines of 'profiler' code, from {profileFile.Length} of 'Profile'."

#!fsharp

let sinkFile = __DESIRED_PROFILER_OUTPUT__
IO.File.WriteAllText
    ( sinkFile
    , profilerCode
    )

"Extracted 'profiler' saved at: " + sinkFile

#!pwsh

#!share --from fsharp __DESIRED_PROFILER_OUTPUT__

# example of use 'profiler' script
Write-Host "dot-loading script: '$__DESIRED_PROFILER_OUTPUT__'..."
. "$__DESIRED_PROFILER_OUTPUT__" `
    -__PROFILER_SetStrictModeStop `
    -__PROFILER_SetDebugVerbose `
    # -__PROFILER_WriteOn_LogEvent `
    # -__PROFILER_WithExamples
# possible 'profiler' configurations ^^^

__logEvent "an example of logged event"

__logShowAllEvents_WriteHost
